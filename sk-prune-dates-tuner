#!/bin/bash

declare -i keep time exp=3 split
cmd_name=${0##*/}

args_par=ntE
. sk-args-canon
while (( $# )); do
    case "$1" in
        -n|-keep=) shift; keep=$1 ;;
        -t|-time=) shift; time=$(sk-time-to-sec $1) ;;
        -E|-exp=) shift; exp=$1 ;;
        *) echo "Error: unknown option '$1'"; exit ;;
    esac
    shift
done

(( keep && time )) || {
cat <<EOF
Constraints tuning tool for linear/exponential date pruning adopted by various
tools						Written by Sandro Floridia

Syntax:  $cmd_name [options]

-n --keep=NUM	Maximum number of dates to keep
-t --time=NUM[ymwdhM]	Valid time window for keeping dates,
		for ex. 6m (6 months), 4w (4 weeks), 7d12h (7 days + 12 hours)
-E --exp=NUM	Exponent: pruning algorithm uses a power based pattern, high
		values leads to a fast growing distance between recent and
		earlier dates. 1 gives an even distribution, realistic values
		are between 1 and 5, default is 3

Example:  $cmd_name -n10 -t90d
EOF
exit
}

declare -i linear=$((exp==1)) snap i j year=31557600 month=2629800 day=86400 hour=3600 minute=60 \
    block=$((time/($(tput cols)-16))) bar
let time*=1000000
split=$((time/(keep-linear)**exp+1))

echo "Pruning constraints (older to latter):"
while (( keep > 1 )); do
    snap=$((split*(keep-linear)**exp))/1000000
    bar=snap/block
    j=0 # To limit unnecessary verbosity for accuracy
    printf "n° $keep\t"
    i=snap/year
    (( i )) && {
        printf "$i"Y
        let snap%=year j++
    }
    i=snap/month
    (( i )) && {
        (( j )) && printf " "
        printf "$i"M
        let snap%=month j++
    }
    i=snap/day
    (( i && j < 2 )) && {
        (( j )) && printf " "
        printf "$i"d
        let snap%=day j++
    }
    i=snap/hour
    (( i && j < 2 )) && {
        (( j )) && printf " "
        printf "$i"h
        let snap%=hour j++
    }
    i=snap/minute
    (( i && j < 2 )) && {
        (( j )) && printf " "
        printf "$i"m
    }
    printf \\t; head -c$bar /dev/zero | tr \\0 \|; echo
    let keep--
done
echo "n° 1    0 (now)"
